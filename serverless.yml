service: gitmetrix

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 512}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  config:
    authToken: 'something' # Your choice, see for example https://www.uuidgenerator.net for getting a UUID v4
    accountNumber: '876265053232'
    tableName: gitmetrix
  aws:
    databaseArn: 'arn:aws:dynamodb:${self:provider.region}:${self:custom.config.accountNumber}:table/${self:custom.config.tableName}'
    apiGatewayCachingTtl:
      prod: 30
      dev: 0
      test: 0
    apiGatewayCachingTtlValue: ${self:custom.aws.apiGatewayCachingTtl.${self:provider.stage}, self:custom.aws.apiGatewayCachingTtl.test} # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695

functions:
  AuthorizerGet:
    handler: src/infrastructure/authorizers/Authorizer.handler
    description: ${self:service} authorizer for getting metrics
    environment:
      AUTH_TOKEN: ${self:custom.config.authToken}
  AuthorizerAdd:
    handler: src/infrastructure/authorizers/Authorizer.handler
    description: ${self:service} authorizer for adding metrics
    environment:
      AUTH_TOKEN: ${self:custom.config.authToken}
  GetMetrics:
    handler: src/infrastructure/adapters/web/GetMetrics.handler
    description: Get metrics from Gitmetrix
    events:
      - http:
          method: GET
          path: /metrics
          authorizer:
            name: AuthorizerGet
            resultTtlInSeconds: ${self:custom.aws.apiGatewayCachingTtlValue}
            identitySource: method.request.header.Authorization
            type: request
          cors:
            origin: '*'
            methods:
              - GET
            headers:
              - Content-Type
              - Authorization
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Vary
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}
    environment:
      REGION: ${self:provider.region}
      TABLE_NAME: ${self:custom.config.tableName}
  AddMetrics:
    handler: src/infrastructure/adapters/web/AddMetrics.handler
    description: Add a metric into Gitmetrix
    events:
      - http:
          method: POST
          path: /metrics
          authorizer:
            name: AuthorizerAdd
            resultTtlInSeconds: ${self:custom.aws.apiGatewayCachingTtlValue}
            identitySource: method.request.querystring.authorization
            type: request
          cors:
            origin: '*'
            methods:
              - POST
            headers:
              - Content-Type
              - Authorization
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Vary
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: ${self:custom.aws.databaseArn}
    environment:
      REGION: ${self:provider.region}
      TABLE_NAME: ${self:custom.config.tableName}

resources:
  Resources:
    # DynamoDB
    GitmetrixTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    # API Gateway
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthFailureExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureUnauthorizedGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'