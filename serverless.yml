service: gitmetrix

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 512}
  timeout: ${opt:timeout, 10}
  logRetentionInDays: ${opt:logRetentionInDays, 7}
  versionFunctions: false
  httpApi:
    cors: true
    #disableDefaultEndpoint: true
    authorizers:
      AuthorizerAdd:
        functionName: AuthorizerAdd
        resultTtlInSeconds: ${self:custom.config.aws.apiGatewayCachingTtl.${self:provider.stage}, '0'}
        identitySource:
          - $request.querystring.authorization
        type: request
        enableSimpleResponses: true
      AuthorizerGet:
        functionName: AuthorizerGet
        resultTtlInSeconds: ${self:custom.config.aws.apiGatewayCachingTtl.${self:provider.stage}, '0'}
        identitySource:
          - $request.header.Authorization
        type: request
        enableSimpleResponses: true
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  config:
    apiKey: ${opt:apiKey, '6d0bf792-ad5a-49af-9ff5-78fbc15a3e8a'} # Add your desired valid API key here or use the default
    awsAccountNumber: ${opt:awsAccountNumber, '123412341234'} # Set this to your value if you want to use a fallback value
    maxDateRange: ${opt:maxDateRange, '30'}
    maxLifeInDays: ${opt:maxLifeInDays, '90'}
    tableName: ${self:service}-${self:provider.stage}
  aws:
    databaseArn: arn:aws:dynamodb:${aws:region}:${self:custom.config.awsAccountNumber}:table/${self:custom.config.tableName}
    apiGatewayCachingTtl:
      prod: ${opt:apiGatewayCachingTtlProd, '30'}
      dev: ${opt:apiGatewayCachingTtlDev, '0'}
      test: ${opt:apiGatewayCachingTtlTest, '0'}
    apiGatewayCachingTtlValue: ${self:custom.aws.apiGatewayCachingTtl.${self:provider.stage}, self:custom.aws.apiGatewayCachingTtl.test} # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
  esbuild:
    bundle: true
    minify: true

functions:
  AuthorizerAdd:
    handler: src/infrastructure/authorizers/Authorizer.handler
    description: ${self:service} authorizer for adding metrics
    environment:
      API_KEY: ${self:custom.config.apiKey}
  AuthorizerGet:
    handler: src/infrastructure/authorizers/Authorizer.handler
    description: ${self:service} authorizer for getting metrics
    environment:
      API_KEY: ${self:custom.config.apiKey}
  AddMetrics:
    handler: src/infrastructure/adapters/web/AddMetrics.handler
    description: Add a metric into Gitmetrix
    events:
      - httpApi:
          method: POST
          path: /metrics
          authorizer:
            name: AuthorizerAdd
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: ${self:custom.aws.databaseArn}
    environment:
      REGION: ${aws:region}
      TABLE_NAME: ${self:custom.config.tableName}
      MAX_DATE_RANGE: ${self:custom.config.maxDateRange}
      MAX_LIFE_IN_DAYS: ${self:custom.config.maxLifeInDays}
  GetMetrics:
    handler: src/infrastructure/adapters/web/GetMetrics.handler
    description: Get metrics from Gitmetrix
    events:
      - httpApi:
          method: GET
          path: /metrics
          authorizer:
            name: AuthorizerGet
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}
    environment:
      REGION: ${aws:region}
      TABLE_NAME: ${self:custom.config.tableName}
      MAX_DATE_RANGE: ${self:custom.config.maxDateRange}

resources:
  Resources:
    # DynamoDB
    GitmetrixTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:custom.config.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true